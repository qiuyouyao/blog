2020-05-17 08:49:33.086  INFO 3324 --- [restartedMain] com.tutu.blog.VueblogApplication         : Starting VueblogApplication on tutu with PID 3324 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 08:49:33.111 DEBUG 3324 --- [restartedMain] com.tutu.blog.VueblogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 08:49:33.112  INFO 3324 --- [restartedMain] com.tutu.blog.VueblogApplication         : The following profiles are active: dev
2020-05-17 08:49:33.214  INFO 3324 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 08:49:33.215  INFO 3324 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 08:49:34.532  INFO 3324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 08:49:34.637  INFO 3324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 93ms. Found 5 JPA repository interfaces.
2020-05-17 08:49:35.607  INFO 3324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 08:49:35.617  INFO 3324 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 08:49:35.618  INFO 3324 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 08:49:35.761  INFO 3324 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 08:49:35.762  INFO 3324 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2546 ms
2020-05-17 08:49:36.161  INFO 3324 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 08:49:36.781  INFO 3324 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 08:49:36.898  INFO 3324 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 08:49:36.942  WARN 3324 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 08:49:37.272  INFO 3324 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 08:49:37.451  INFO 3324 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 08:49:37.607  INFO 3324 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 08:49:37.630  INFO 3324 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 08:49:38.648  INFO 3324 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 08:49:38.655  INFO 3324 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 08:49:39.158  INFO 3324 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 08:49:39.479  INFO 3324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 08:49:39.481  INFO 3324 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 08:49:39.859  INFO 3324 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 08:49:39.868  INFO 3324 --- [restartedMain] com.tutu.blog.VueblogApplication         : Started VueblogApplication in 7.834 seconds (JVM running for 11.571)
2020-05-17 08:50:25.924  INFO 3324 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 08:50:25.925  INFO 3324 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 08:50:25.936  INFO 3324 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-05-17 08:50:25.988  INFO 3324 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 08:50:26.238  INFO 3324 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 08:59:50.858  INFO 3324 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 08:59:50.911  INFO 3324 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 09:02:16.945  INFO 3324 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 09:02:16.986  INFO 3324 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 09:04:06.121  INFO 3324 --- [http-nio-9090-exec-8] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 09:04:06.161  INFO 3324 --- [http-nio-9090-exec-8] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 09:04:16.567  INFO 3324 --- [http-nio-9090-exec-9] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 09:04:16.599  INFO 3324 --- [http-nio-9090-exec-9] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 09:05:11.765  INFO 3324 --- [http-nio-9090-exec-10] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 09:05:11.797  INFO 3324 --- [http-nio-9090-exec-10] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 09:06:32.079  INFO 368 --- [restartedMain] com.tutu.blog.BlogApplication            : Starting BlogApplication on tutu with PID 368 (H:\IntelliJ IDEA 2019.3.2\blog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 09:06:32.082 DEBUG 368 --- [restartedMain] com.tutu.blog.BlogApplication            : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-17 09:06:32.083  INFO 368 --- [restartedMain] com.tutu.blog.BlogApplication            : The following profiles are active: dev
2020-05-17 09:06:32.137  INFO 368 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in E:\maven_jar\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-17 09:06:32.138  INFO 368 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 09:06:32.138  INFO 368 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 09:06:33.196  INFO 368 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-17 09:06:33.296  INFO 368 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 86ms. Found 5 JPA repository interfaces.
2020-05-17 09:06:34.085  INFO 368 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-05-17 09:06:34.095  INFO 368 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 09:06:34.095  INFO 368 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-17 09:06:34.222  INFO 368 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 09:06:34.222  INFO 368 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2084 ms
2020-05-17 09:06:34.425  INFO 368 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 09:06:34.586  INFO 368 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-17 09:06:34.735  INFO 368 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 09:06:34.829  INFO 368 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 09:06:34.955  INFO 368 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 09:06:34.977  INFO 368 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 09:06:35.830  INFO 368 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 09:06:35.837  INFO 368 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 09:06:35.916  WARN 368 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : Unable to start LiveReload server
2020-05-17 09:06:36.905  WARN 368 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 09:06:37.108  INFO 368 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 09:06:37.209  INFO 368 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-05-17 09:06:37.585  INFO 368 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-05-17 09:06:37.588  INFO 368 --- [restartedMain] com.tutu.blog.BlogApplication            : Started BlogApplication in 6.136 seconds (JVM running for 8.773)
2020-05-17 09:07:16.475  INFO 368 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 09:07:16.475  INFO 368 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 09:07:16.496  INFO 368 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 21 ms
2020-05-17 09:07:16.547  INFO 368 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/login', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.UserController.loginPage', args=[]}
2020-05-17 09:07:16.552  INFO 368 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : result--> admin/login
2020-05-17 09:07:22.575  INFO 368 --- [http-nio-8888-exec-5] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/login', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.UserController.login', args=[root, 123456, org.apache.catalina.session.StandardSessionFacade@fb5b32b, {}]}
2020-05-17 09:07:22.663  INFO 368 --- [http-nio-8888-exec-5] com.tutu.blog.aspect.LogAspect           : result--> admin/index
2020-05-17 09:07:24.280  INFO 368 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}, {blogQueryVO=BlogQueryVO{title='null', typeId=null, recommend=false}, org.springframework.validation.BindingResult.blogQueryVO=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-05-17 09:07:24.361  INFO 368 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : result--> /admin/blogs
2020-05-17 09:07:24.550  INFO 368 --- [http-nio-8888-exec-3] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 09:07:24.571  INFO 368 --- [http-nio-8888-exec-3] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 09:08:23.823  INFO 3324 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 09:08:23.846  INFO 3324 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 09:09:35.432  INFO 3324 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 09:09:35.456  INFO 3324 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 09:09:39.849  INFO 3324 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 09:09:39.881  INFO 3324 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 11:56:52.251  INFO 8308 --- [restartedMain] com.tutu.blog.VueblogApplication         : Starting VueblogApplication on tutu with PID 8308 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 11:56:52.254 DEBUG 8308 --- [restartedMain] com.tutu.blog.VueblogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 11:56:52.255  INFO 8308 --- [restartedMain] com.tutu.blog.VueblogApplication         : The following profiles are active: dev
2020-05-17 11:56:52.324  INFO 8308 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 11:56:52.325  INFO 8308 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 11:56:53.609  INFO 8308 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 11:56:53.809  INFO 8308 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 182ms. Found 5 JPA repository interfaces.
2020-05-17 11:56:55.301  INFO 8308 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 11:56:55.316  INFO 8308 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 11:56:55.317  INFO 8308 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 11:56:55.465  INFO 8308 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 11:56:55.467  INFO 8308 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3142 ms
2020-05-17 11:56:55.844  INFO 8308 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 11:56:55.947  INFO 8308 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 11:56:56.047  INFO 8308 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 11:56:56.129  WARN 8308 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 11:56:56.499  INFO 8308 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 11:56:56.738  INFO 8308 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 11:56:57.018  INFO 8308 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 11:56:57.052  INFO 8308 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 11:56:57.200  INFO 4072 --- [restartedMain] com.tutu.blog.BlogApplication            : Starting BlogApplication on tutu with PID 4072 (H:\IntelliJ IDEA 2019.3.2\blog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 11:56:57.203 DEBUG 4072 --- [restartedMain] com.tutu.blog.BlogApplication            : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-17 11:56:57.204  INFO 4072 --- [restartedMain] com.tutu.blog.BlogApplication            : The following profiles are active: dev
2020-05-17 11:56:57.304  INFO 4072 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in E:\maven_jar\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-17 11:56:57.305  INFO 4072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 11:56:57.305  INFO 4072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 11:56:58.559  INFO 8308 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 11:56:58.589  INFO 8308 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 11:56:58.934  INFO 4072 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-17 11:56:59.044  INFO 4072 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 95ms. Found 5 JPA repository interfaces.
2020-05-17 11:56:59.356  INFO 8308 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 11:56:59.873  INFO 8308 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 11:56:59.879  INFO 8308 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 11:57:00.291  INFO 4072 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-05-17 11:57:00.306  INFO 4072 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 11:57:00.306  INFO 4072 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-17 11:57:00.536  INFO 8308 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 11:57:00.550  INFO 8308 --- [restartedMain] com.tutu.blog.VueblogApplication         : Started VueblogApplication in 9.156 seconds (JVM running for 10.752)
2020-05-17 11:57:00.554  INFO 4072 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 11:57:00.554  INFO 4072 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3249 ms
2020-05-17 11:57:00.798  INFO 4072 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 11:57:00.998  INFO 4072 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-17 11:57:01.150  INFO 4072 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 11:57:01.352  INFO 4072 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 11:57:01.639  INFO 4072 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 11:57:01.674  INFO 4072 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 11:57:02.735  INFO 4072 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 11:57:02.741  INFO 4072 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 11:57:02.804  WARN 4072 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : Unable to start LiveReload server
2020-05-17 11:57:03.680  WARN 4072 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 11:57:03.878  INFO 4072 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 11:57:03.973  INFO 4072 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-05-17 11:57:04.316  INFO 4072 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-05-17 11:57:04.320  INFO 4072 --- [restartedMain] com.tutu.blog.BlogApplication            : Started BlogApplication in 8.17 seconds (JVM running for 10.325)
2020-05-17 11:57:05.488  INFO 8308 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 11:57:05.488  INFO 8308 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 11:57:05.560  INFO 8308 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 72 ms
2020-05-17 11:57:05.624  INFO 8308 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 11:57:05.912  INFO 8308 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 11:57:35.606  INFO 8308 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 11:57:35.648  INFO 8308 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 11:58:06.025  INFO 8308 --- [http-nio-9090-exec-5] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 11:58:06.086  INFO 8308 --- [http-nio-9090-exec-5] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:01:14.911  INFO 8308 --- [http-nio-9090-exec-7] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 12:01:14.953  INFO 8308 --- [http-nio-9090-exec-7] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:01:19.457  INFO 8308 --- [http-nio-9090-exec-8] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.blog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQueryVO{title='null', typeId=null, recommend=false}]}
2020-05-17 12:01:19.497  INFO 8308 --- [http-nio-9090-exec-8] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:32:37.562  INFO 2484 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 2484 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 12:32:37.566 DEBUG 2484 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 12:32:37.567  INFO 2484 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 12:32:37.639  INFO 2484 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 12:32:37.640  INFO 2484 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 12:32:38.676  INFO 2484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 12:32:38.737  INFO 2484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 54ms. Found 1 JPA repository interfaces.
2020-05-17 12:32:39.534  INFO 2484 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 12:32:39.543  INFO 2484 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 12:32:39.543  INFO 2484 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 12:32:39.643  INFO 2484 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 12:32:39.644  INFO 2484 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2004 ms
2020-05-17 12:32:39.835  INFO 2484 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 12:32:39.886  INFO 2484 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 12:32:39.943  INFO 2484 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 12:32:39.974  WARN 2484 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 12:32:40.204  INFO 2484 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 12:32:40.297  INFO 2484 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 12:32:40.418  INFO 2484 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 12:32:40.438  INFO 2484 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 12:32:41.257  INFO 2484 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 12:32:41.264  INFO 2484 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 12:32:41.798  INFO 2484 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 12:32:42.097  INFO 2484 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 12:32:42.100  INFO 2484 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 12:32:42.314  INFO 2484 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 12:32:42.323  INFO 2484 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 5.492 seconds (JVM running for 7.048)
2020-05-17 12:33:10.405  INFO 2484 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 12:33:10.405  INFO 2484 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 12:33:10.415  INFO 2484 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-05-17 12:33:10.443  INFO 2484 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 12:33:10.676  INFO 2484 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:33:39.528  INFO 2484 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 12:33:39.575  INFO 2484 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:34:12.944  INFO 3760 --- [restartedMain] com.tutu.blog.BlogApplication            : Starting BlogApplication on tutu with PID 3760 (H:\IntelliJ IDEA 2019.3.2\blog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 12:34:12.948 DEBUG 3760 --- [restartedMain] com.tutu.blog.BlogApplication            : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-17 12:34:12.949  INFO 3760 --- [restartedMain] com.tutu.blog.BlogApplication            : The following profiles are active: dev
2020-05-17 12:34:13.036  INFO 3760 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in E:\maven_jar\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-17 12:34:13.037  INFO 3760 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 12:34:13.037  INFO 3760 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 12:34:14.275  INFO 3760 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-17 12:34:14.400  INFO 3760 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 109ms. Found 5 JPA repository interfaces.
2020-05-17 12:34:15.445  INFO 3760 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-05-17 12:34:15.457  INFO 3760 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 12:34:15.458  INFO 3760 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-17 12:34:15.588  INFO 3760 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 12:34:15.588  INFO 3760 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2551 ms
2020-05-17 12:34:15.827  INFO 3760 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 12:34:15.999  INFO 3760 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-17 12:34:16.190  INFO 3760 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 12:34:16.323  INFO 3760 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 12:34:16.477  INFO 3760 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 12:34:16.501  INFO 3760 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 12:34:17.636  INFO 3760 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 12:34:17.646  INFO 3760 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 12:34:17.970  INFO 3760 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 12:34:20.252  WARN 3760 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 12:34:20.808  INFO 3760 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 12:34:21.122  INFO 3760 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-05-17 12:34:22.672  INFO 3760 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-05-17 12:34:22.680  INFO 3760 --- [restartedMain] com.tutu.blog.BlogApplication            : Started BlogApplication in 10.621 seconds (JVM running for 13.562)
2020-05-17 12:34:26.534  INFO 1032 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 1032 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 12:34:26.539 DEBUG 1032 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 12:34:26.539  INFO 1032 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 12:34:26.612  INFO 1032 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 12:34:26.612  INFO 1032 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 12:34:27.482  INFO 1032 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 12:34:27.561  INFO 1032 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 70ms. Found 1 JPA repository interfaces.
2020-05-17 12:34:28.570  INFO 1032 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 12:34:28.580  INFO 1032 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 12:34:28.580  INFO 1032 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 12:34:28.704  INFO 1032 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 12:34:28.705  INFO 1032 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2093 ms
2020-05-17 12:34:28.948  INFO 1032 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 12:34:29.010  INFO 1032 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 12:34:29.077  INFO 1032 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 12:34:29.137  WARN 1032 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 12:34:29.375  INFO 1032 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 12:34:29.528  INFO 1032 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 12:34:29.665  INFO 1032 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 12:34:29.686  INFO 1032 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 12:34:30.517  INFO 1032 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 12:34:30.526  INFO 1032 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 12:34:31.028  WARN 1032 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : Unable to start LiveReload server
2020-05-17 12:34:31.376  INFO 1032 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 12:34:31.378  INFO 1032 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 12:34:31.603  INFO 1032 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 12:34:31.615  INFO 1032 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.241 seconds (JVM running for 10.332)
2020-05-17 12:34:38.027  INFO 1032 --- [http-nio-9090-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 12:34:38.027  INFO 1032 --- [http-nio-9090-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 12:34:38.039  INFO 1032 --- [http-nio-9090-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-05-17 12:34:38.078  INFO 1032 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 12:35:39.990  WARN 1032 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m10s225ms179µs600ns).
2020-05-17 12:35:39.992  INFO 1032 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:35:49.191  INFO 1032 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 12:35:49.240  INFO 1032 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:44:23.566  INFO 1032 --- [Thread-2] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 12:44:23.571  INFO 1032 --- [Thread-2] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 12:44:23.860  INFO 1032 --- [Thread-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 12:44:23.875  INFO 1032 --- [Thread-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 12:44:24.273  INFO 1032 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 1032 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 12:44:24.273 DEBUG 1032 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 12:44:24.273  INFO 1032 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 12:44:24.824  INFO 1032 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 12:44:24.848  INFO 1032 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 23ms. Found 1 JPA repository interfaces.
2020-05-17 12:44:25.209  INFO 1032 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 12:44:25.210  INFO 1032 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 12:44:25.210  INFO 1032 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 12:44:25.252  INFO 1032 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 12:44:25.252  INFO 1032 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 973 ms
2020-05-17 12:44:25.386  INFO 1032 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 12:44:25.423  INFO 1032 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 12:44:25.432  INFO 1032 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2020-05-17 12:44:25.439  INFO 1032 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2020-05-17 12:44:25.440  INFO 1032 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 12:44:25.532  WARN 1032 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 12:44:25.723  INFO 1032 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 12:44:25.725  INFO 1032 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 12:44:26.252  WARN 1032 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : Unable to start LiveReload server
2020-05-17 12:44:26.548  INFO 1032 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 12:44:26.549  INFO 1032 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 12:44:26.625  INFO 1032 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 12:44:26.630  INFO 1032 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 2.425 seconds (JVM running for 605.348)
2020-05-17 12:44:26.632  INFO 1032 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-05-17 12:44:35.795  INFO 1032 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 12:44:35.796  INFO 1032 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 12:44:35.797  INFO 1032 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...
2020-05-17 12:44:35.801  INFO 1032 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.
2020-05-17 12:44:43.710  INFO 2956 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 2956 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 12:44:43.716 DEBUG 2956 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 12:44:43.717  INFO 2956 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 12:44:43.829  INFO 2956 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 12:44:43.830  INFO 2956 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 12:44:44.937  INFO 2956 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 12:44:45.051  INFO 2956 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 99ms. Found 1 JPA repository interfaces.
2020-05-17 12:44:46.314  INFO 2956 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 12:44:46.326  INFO 2956 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 12:44:46.327  INFO 2956 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 12:44:46.468  INFO 2956 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 12:44:46.468  INFO 2956 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2637 ms
2020-05-17 12:44:46.716  INFO 2956 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 12:44:46.779  INFO 2956 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 12:44:46.859  INFO 2956 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 12:44:46.944  WARN 2956 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 12:44:47.295  INFO 2956 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 12:44:47.463  INFO 2956 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 12:44:47.634  INFO 2956 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 12:44:47.663  INFO 2956 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 12:44:48.691  INFO 2956 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 12:44:48.701  INFO 2956 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 12:44:49.196  WARN 2956 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : Unable to start LiveReload server
2020-05-17 12:44:49.548  INFO 2956 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 12:44:49.551  INFO 2956 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 12:44:49.798  INFO 2956 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 12:44:49.807  INFO 2956 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 7.15 seconds (JVM running for 9.49)
2020-05-17 12:44:55.301  INFO 2956 --- [http-nio-9090-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 12:44:55.302  INFO 2956 --- [http-nio-9090-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 12:44:55.322  INFO 2956 --- [http-nio-9090-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 20 ms
2020-05-17 12:44:55.387  INFO 2956 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 12:46:21.932  INFO 2956 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:46:21.937  WARN 2956 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m34s202ms244µs600ns).
2020-05-17 12:46:32.619  INFO 2956 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 12:46:32.666  INFO 2956 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:47:40.599  INFO 2956 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 12:47:40.631  INFO 2956 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:47:42.963  INFO 2956 --- [http-nio-9090-exec-6] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 12:47:42.996  INFO 2956 --- [http-nio-9090-exec-6] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:47:58.320  INFO 2956 --- [http-nio-9090-exec-8] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 12:47:58.359  INFO 2956 --- [http-nio-9090-exec-8] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 12:59:21.719  INFO 3760 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 12:59:21.723  INFO 3760 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 12:59:21.740  INFO 3760 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 12:59:21.757  INFO 3760 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:08:12.180  INFO 2956 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:08:12.182  INFO 2956 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:08:12.184  INFO 2956 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:08:12.192  INFO 2956 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:08:27.956  INFO 7108 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 7108 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 13:08:27.960 DEBUG 7108 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 13:08:27.961  INFO 7108 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 13:08:28.032  INFO 7108 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 13:08:28.032  INFO 7108 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 13:08:29.333  INFO 7108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 13:08:29.464  INFO 7108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 114ms. Found 1 JPA repository interfaces.
2020-05-17 13:08:30.356  INFO 7108 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 13:08:30.367  INFO 7108 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 13:08:30.367  INFO 7108 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 13:08:30.520  INFO 7108 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 13:08:30.520  INFO 7108 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2488 ms
2020-05-17 13:08:30.889  INFO 7108 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 13:08:30.966  INFO 7108 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 13:08:31.051  INFO 7108 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 13:08:31.121  WARN 7108 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 13:08:31.369  INFO 7108 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 13:08:31.512  INFO 7108 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 13:08:31.651  INFO 7108 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 13:08:31.672  INFO 7108 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 13:08:32.551  INFO 7108 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 13:08:32.560  INFO 7108 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:08:33.079  INFO 7108 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 13:08:33.393  INFO 7108 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 13:08:33.395  INFO 7108 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 13:08:33.630  INFO 7108 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 13:08:33.641  INFO 7108 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.551 seconds (JVM running for 8.544)
2020-05-17 13:08:42.910  INFO 7108 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 13:08:42.910  INFO 7108 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 13:08:42.924  INFO 7108 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-05-17 13:08:42.969  INFO 7108 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:08:43.256  INFO 7108 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> [{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$[0].user"},"views":1},{"$ref":"$[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$[0].user.blogs[0]"}]
2020-05-17 13:08:51.866  INFO 7108 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:08:51.912  INFO 7108 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : result--> [{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$[0].user"},"views":1},{"$ref":"$[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$[0].user.blogs[0]"}]
2020-05-17 13:09:09.419  INFO 7108 --- [http-nio-9090-exec-5] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:09:09.447  INFO 7108 --- [http-nio-9090-exec-5] com.tutu.blog.aspect.LogAspect           : result--> [{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$[0].user"},"views":1},{"$ref":"$[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$[0].user.blogs[0]"}]
2020-05-17 13:09:10.524  INFO 7108 --- [http-nio-9090-exec-6] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:09:10.553  INFO 7108 --- [http-nio-9090-exec-6] com.tutu.blog.aspect.LogAspect           : result--> [{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$[0].user"},"views":1},{"$ref":"$[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$[0].user.blogs[0]"}]
2020-05-17 13:10:13.461  INFO 7108 --- [http-nio-9090-exec-10] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:10:13.495  INFO 7108 --- [http-nio-9090-exec-10] com.tutu.blog.aspect.LogAspect           : result--> [{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$[0].user"},"views":1},{"$ref":"$[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$[0].user.blogs[0]"}]
2020-05-17 13:16:31.325  INFO 7108 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:16:31.328  INFO 7108 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:16:31.330  INFO 7108 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:16:31.342  INFO 7108 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:16:45.725  INFO 1308 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 1308 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 13:16:45.729 DEBUG 1308 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 13:16:45.729  INFO 1308 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 13:16:45.803  INFO 1308 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 13:16:45.803  INFO 1308 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 13:16:47.062  INFO 1308 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 13:16:47.144  INFO 1308 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 72ms. Found 1 JPA repository interfaces.
2020-05-17 13:16:48.041  INFO 1308 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 13:16:48.053  INFO 1308 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 13:16:48.053  INFO 1308 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 13:16:48.180  INFO 1308 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 13:16:48.181  INFO 1308 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2376 ms
2020-05-17 13:16:48.482  INFO 1308 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 13:16:48.555  INFO 1308 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 13:16:48.652  INFO 1308 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 13:16:48.713  WARN 1308 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 13:16:49.039  INFO 1308 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 13:16:49.280  INFO 1308 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 13:16:49.520  INFO 1308 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 13:16:49.550  INFO 1308 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 13:16:50.703  INFO 1308 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 13:16:50.712  INFO 1308 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:16:51.231  INFO 1308 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 13:16:51.579  INFO 1308 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 13:16:51.581  INFO 1308 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 13:16:51.864  INFO 1308 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 13:16:51.875  INFO 1308 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.977 seconds (JVM running for 9.016)
2020-05-17 13:16:57.619  INFO 1308 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 13:16:57.620  INFO 1308 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 13:16:57.634  INFO 1308 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-05-17 13:16:57.684  INFO 1308 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:16:58.140 ERROR 1308 --- [http-nio-9090-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.StackOverflowError] with root cause

java.lang.StackOverflowError: null
	at com.alibaba.fastjson.serializer.JSONSerializer.writeWithFieldName(JSONSerializer.java:331) ~[fastjson-1.2.58.jar:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]

2020-05-17 13:18:18.285  INFO 1308 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:18:18.287  INFO 1308 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:18:18.290  INFO 1308 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:18:18.300  INFO 1308 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:20:01.977  INFO 9204 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 9204 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 13:20:01.983 DEBUG 9204 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 13:20:01.983  INFO 9204 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 13:20:02.070  INFO 9204 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 13:20:02.071  INFO 9204 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 13:20:03.205  INFO 9204 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 13:20:03.283  INFO 9204 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 69ms. Found 1 JPA repository interfaces.
2020-05-17 13:20:04.176  INFO 9204 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 13:20:04.186  INFO 9204 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 13:20:04.187  INFO 9204 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 13:20:04.303  INFO 9204 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 13:20:04.304  INFO 9204 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2232 ms
2020-05-17 13:20:04.585  INFO 9204 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 13:20:04.644  INFO 9204 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 13:20:04.715  INFO 9204 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 13:20:04.773  WARN 9204 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 13:20:05.002  INFO 9204 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 13:20:05.143  INFO 9204 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 13:20:05.306  INFO 9204 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 13:20:05.328  INFO 9204 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 13:20:06.175  INFO 9204 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 13:20:06.185  INFO 9204 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:20:06.735  INFO 9204 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 13:20:07.143  INFO 9204 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 13:20:07.144  INFO 9204 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 13:20:07.392  INFO 9204 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 13:20:07.404  INFO 9204 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.333 seconds (JVM running for 8.486)
2020-05-17 13:20:14.116  INFO 9204 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 13:20:14.117  INFO 9204 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 13:20:14.131  INFO 9204 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-05-17 13:20:14.174  INFO 9204 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:20:14.450 ERROR 9204 --- [http-nio-9090-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.StackOverflowError] with root cause

java.lang.StackOverflowError: null
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ~[gson-2.8.6.jar:na]
	at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1027) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[gson-2.8.6.jar:na]
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[gson-2.8.6.jar:na]

2020-05-17 13:28:24.191  INFO 9204 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:28:24.195  INFO 9204 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:28:24.198  INFO 9204 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:28:24.451  INFO 9204 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:29:15.467  INFO 7568 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 7568 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 13:29:15.472 DEBUG 7568 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 13:29:15.472  INFO 7568 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 13:29:15.596  INFO 7568 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 13:29:15.596  INFO 7568 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 13:29:16.824  INFO 7568 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 13:29:16.905  INFO 7568 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 70ms. Found 1 JPA repository interfaces.
2020-05-17 13:29:17.803  INFO 7568 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 13:29:17.813  INFO 7568 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 13:29:17.814  INFO 7568 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 13:29:17.935  INFO 7568 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 13:29:17.936  INFO 7568 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2339 ms
2020-05-17 13:29:18.242  INFO 7568 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 13:29:18.316  INFO 7568 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 13:29:18.398  INFO 7568 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 13:29:18.461  WARN 7568 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 13:29:18.695  INFO 7568 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 13:29:18.828  INFO 7568 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 13:29:18.964  INFO 7568 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 13:29:18.984  INFO 7568 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 13:29:19.857  INFO 7568 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 13:29:19.866  INFO 7568 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:29:20.366  INFO 7568 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 13:29:20.706  INFO 7568 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 13:29:20.707  INFO 7568 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 13:29:20.931  INFO 7568 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 13:29:20.941  INFO 7568 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.483 seconds (JVM running for 8.654)
2020-05-17 13:29:28.061  INFO 7568 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 13:29:28.061  INFO 7568 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 13:29:28.075  INFO 7568 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-05-17 13:29:28.117  INFO 7568 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:29:28.407  INFO 7568 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 13:29:47.633  INFO 7568 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:29:47.680  INFO 7568 --- [http-nio-9090-exec-3] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 13:33:08.143  INFO 7568 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:33:08.147  INFO 7568 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:33:08.149  INFO 7568 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:33:08.387  INFO 7568 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:33:17.386  INFO 11044 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 11044 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 13:33:17.392 DEBUG 11044 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 13:33:17.392  INFO 11044 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 13:33:17.487  INFO 11044 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 13:33:17.488  INFO 11044 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 13:33:18.483  INFO 11044 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 13:33:18.568  INFO 11044 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 75ms. Found 1 JPA repository interfaces.
2020-05-17 13:33:19.630  INFO 11044 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 13:33:19.643  INFO 11044 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 13:33:19.643  INFO 11044 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 13:33:19.767  INFO 11044 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 13:33:19.768  INFO 11044 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2280 ms
2020-05-17 13:33:20.026  INFO 11044 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 13:33:20.089  INFO 11044 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 13:33:20.158  INFO 11044 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 13:33:20.217  WARN 11044 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 13:33:20.479  INFO 11044 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 13:33:20.614  INFO 11044 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 13:33:20.760  INFO 11044 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 13:33:20.783  INFO 11044 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 13:33:21.656  INFO 11044 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 13:33:21.665  INFO 11044 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:33:22.190  INFO 11044 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 13:33:22.551  INFO 11044 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 13:33:22.553  INFO 11044 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 13:33:22.790  INFO 11044 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 13:33:22.800  INFO 11044 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.445 seconds (JVM running for 8.526)
2020-05-17 13:33:29.832  INFO 11044 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 13:33:29.832  INFO 11044 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 13:33:29.846  INFO 11044 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-05-17 13:33:29.888  INFO 11044 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:33:30.189  INFO 11044 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 13:33:45.138  INFO 11044 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:33:45.182  INFO 11044 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0]"}],"id":55,"name":"mysql"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":57,"name":"springmvc"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":58,"name":"oracle"},{"blogs":[{"$ref":"$.data.content[0]"}],"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"blogs":[{"$ref":"$.data.content[0]"}],"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","blogs":[{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":54,"name":"java"}],"title":"MD5加密","type":{"blogs":[{"$ref":"$.data.content[0].user.blogs[0]"}],"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"$ref":"$.data.content[0].user"},"views":1},{"$ref":"$.data.content[0]"}],"createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"$ref":"$.data.content[0].user.blogs[0]"}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"$ref":"$.data.pageable.sort"},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 13:34:09.479  INFO 11044 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:34:09.481  INFO 11044 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:34:09.638  INFO 11044 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:34:09.646  INFO 11044 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:34:16.245  INFO 11164 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 11164 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 13:34:16.249 DEBUG 11164 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 13:34:16.249  INFO 11164 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 13:34:16.322  INFO 11164 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 13:34:16.322  INFO 11164 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 13:34:17.389  INFO 11164 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 13:34:17.467  INFO 11164 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 68ms. Found 1 JPA repository interfaces.
2020-05-17 13:34:18.441  INFO 11164 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 13:34:18.452  INFO 11164 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 13:34:18.452  INFO 11164 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 13:34:18.578  INFO 11164 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 13:34:18.579  INFO 11164 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2256 ms
2020-05-17 13:34:18.818  INFO 11164 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 13:34:18.880  INFO 11164 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 13:34:18.946  INFO 11164 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 13:34:19.015  WARN 11164 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 13:34:19.256  INFO 11164 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 13:34:19.417  INFO 11164 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 13:34:19.571  INFO 11164 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 13:34:19.593  INFO 11164 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 13:34:20.639  INFO 11164 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 13:34:20.649  INFO 11164 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:34:21.349  INFO 11164 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 13:34:21.707  INFO 11164 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 13:34:21.709  INFO 11164 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 13:34:21.966  INFO 11164 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 13:34:21.980  INFO 11164 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.727 seconds (JVM running for 8.644)
2020-05-17 13:34:23.902  INFO 11164 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 13:34:23.903  INFO 11164 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 13:34:23.922  INFO 11164 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 19 ms
2020-05-17 13:34:23.983  INFO 11164 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:34:24.600 ERROR 11164 --- [http-nio-9090-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.StackOverflowError] with root cause

java.lang.StackOverflowError: null
	at com.alibaba.fastjson.serializer.JSONSerializer.writeWithFieldName(JSONSerializer.java:331) ~[fastjson-1.2.58.jar:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]

2020-05-17 13:35:38.335  INFO 11164 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:35:38.339  INFO 11164 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:35:38.341  INFO 11164 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:35:38.351  INFO 11164 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:35:46.302  INFO 12596 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 12596 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 13:35:46.308 DEBUG 12596 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 13:35:46.312  INFO 12596 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 13:35:46.467  INFO 12596 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 13:35:46.467  INFO 12596 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 13:35:47.812  INFO 12596 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 13:35:47.954  INFO 12596 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 124ms. Found 1 JPA repository interfaces.
2020-05-17 13:35:49.154  INFO 12596 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 13:35:49.170  INFO 12596 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 13:35:49.170  INFO 12596 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 13:35:49.339  INFO 12596 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 13:35:49.339  INFO 12596 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2872 ms
2020-05-17 13:35:49.628  INFO 12596 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 13:35:49.688  INFO 12596 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 13:35:49.755  INFO 12596 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 13:35:49.822  WARN 12596 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 13:35:50.053  INFO 12596 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 13:35:50.193  INFO 12596 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 13:35:50.339  INFO 12596 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 13:35:50.361  INFO 12596 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 13:35:51.224  INFO 12596 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 13:35:51.234  INFO 12596 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:35:51.774  INFO 12596 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 13:35:52.093  INFO 12596 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 13:35:52.095  INFO 12596 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 13:35:52.336  INFO 12596 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 13:35:52.346  INFO 12596 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 7.324 seconds (JVM running for 9.61)
2020-05-17 13:36:54.220  INFO 12596 --- [http-nio-9090-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 13:36:54.221  INFO 12596 --- [http-nio-9090-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 13:36:54.241  INFO 12596 --- [http-nio-9090-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 20 ms
2020-05-17 13:36:54.321  INFO 12596 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:36:54.905 ERROR 12596 --- [http-nio-9090-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.StackOverflowError] with root cause

java.lang.StackOverflowError: null
	at com.alibaba.fastjson.serializer.JSONSerializer.writeWithFieldName(JSONSerializer.java:331) ~[fastjson-1.2.58.jar:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]

2020-05-17 13:44:25.820  INFO 12596 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:44:25.823  INFO 12596 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:44:25.826  INFO 12596 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:44:25.839  INFO 12596 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:46:22.363  INFO 4552 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 4552 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 13:46:22.368 DEBUG 4552 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 13:46:22.368  INFO 4552 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 13:46:22.435  INFO 4552 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 13:46:22.436  INFO 4552 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 13:46:23.443  INFO 4552 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 13:46:23.522  INFO 4552 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 69ms. Found 1 JPA repository interfaces.
2020-05-17 13:46:24.387  INFO 4552 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 13:46:24.398  INFO 4552 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 13:46:24.398  INFO 4552 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 13:46:24.513  INFO 4552 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 13:46:24.513  INFO 4552 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2077 ms
2020-05-17 13:46:24.747  INFO 4552 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 13:46:24.807  INFO 4552 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 13:46:24.878  INFO 4552 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 13:46:24.936  WARN 4552 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 13:46:25.181  INFO 4552 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 13:46:25.349  INFO 4552 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 13:46:25.541  INFO 4552 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 13:46:25.568  INFO 4552 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 13:46:26.476  INFO 4552 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 13:46:26.489  INFO 4552 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:46:27.102  INFO 4552 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 13:46:27.475  INFO 4552 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 13:46:27.477  INFO 4552 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 13:46:27.743  INFO 4552 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 13:46:27.756  INFO 4552 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.454 seconds (JVM running for 8.464)
2020-05-17 13:46:31.572  INFO 4552 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 13:46:31.572  INFO 4552 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 13:46:31.588  INFO 4552 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2020-05-17 13:46:31.633  INFO 4552 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:46:32.142 ERROR 4552 --- [http-nio-9090-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.StackOverflowError] with root cause

java.lang.StackOverflowError: null
	at com.alibaba.fastjson.serializer.JSONSerializer.writeWithFieldName(JSONSerializer.java:331) ~[fastjson-1.2.58.jar:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]

2020-05-17 13:49:23.975  INFO 4552 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:49:23.978  INFO 4552 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:49:23.980  INFO 4552 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:49:23.993  INFO 4552 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 13:49:32.204  INFO 2012 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 2012 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 13:49:32.210 DEBUG 2012 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 13:49:32.211  INFO 2012 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 13:49:32.305  INFO 2012 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 13:49:32.306  INFO 2012 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 13:49:33.500  INFO 2012 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 13:49:33.589  INFO 2012 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 77ms. Found 1 JPA repository interfaces.
2020-05-17 13:49:34.609  INFO 2012 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 13:49:34.623  INFO 2012 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 13:49:34.624  INFO 2012 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 13:49:34.756  INFO 2012 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 13:49:34.756  INFO 2012 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2450 ms
2020-05-17 13:49:34.990  INFO 2012 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 13:49:35.051  INFO 2012 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 13:49:35.127  INFO 2012 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 13:49:35.216  WARN 2012 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 13:49:35.465  INFO 2012 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 13:49:35.610  INFO 2012 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 13:49:35.764  INFO 2012 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 13:49:35.784  INFO 2012 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 13:49:36.620  INFO 2012 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 13:49:36.629  INFO 2012 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:49:37.104  INFO 2012 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 13:49:37.449  INFO 2012 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 13:49:37.452  INFO 2012 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 13:49:37.679  INFO 2012 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 13:49:37.689  INFO 2012 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.59 seconds (JVM running for 8.462)
2020-05-17 13:49:43.256  INFO 2012 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 13:49:43.257  INFO 2012 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 13:49:43.274  INFO 2012 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2020-05-17 13:49:43.328  INFO 2012 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 13:49:43.778 ERROR 2012 --- [http-nio-9090-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.StackOverflowError] with root cause

java.lang.StackOverflowError: null
	at com.alibaba.fastjson.serializer.JSONSerializer.writeWithFieldName(JSONSerializer.java:331) ~[fastjson-1.2.58.jar:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_3_Tag.writeDirectNonContext(Unknown Source) ~[na:na]
	at com.alibaba.fastjson.serializer.ASMSerializer_2_Blog.writeDirectNonContext(Unknown Source) ~[na:na]

2020-05-17 13:58:07.517  INFO 2012 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 13:58:07.524  INFO 2012 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 13:58:07.527  INFO 2012 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 13:58:07.541  INFO 2012 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 14:03:21.905  INFO 10584 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 10584 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 14:03:21.909 DEBUG 10584 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 14:03:21.909  INFO 10584 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 14:03:21.980  INFO 10584 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 14:03:21.980  INFO 10584 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 14:03:23.271  INFO 10584 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 14:03:23.353  INFO 10584 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 69ms. Found 1 JPA repository interfaces.
2020-05-17 14:03:24.369  INFO 10584 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 14:03:24.398  INFO 10584 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 14:03:24.400  INFO 10584 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 14:03:24.553  INFO 10584 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 14:03:24.554  INFO 10584 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2574 ms
2020-05-17 14:03:24.826  INFO 10584 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 14:03:24.888  INFO 10584 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 14:03:24.956  INFO 10584 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 14:03:25.020  WARN 10584 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 14:03:25.274  INFO 10584 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 14:03:25.429  INFO 10584 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 14:03:25.563  INFO 10584 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 14:03:25.584  INFO 10584 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 14:03:26.540  INFO 10584 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 14:03:26.549  INFO 10584 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 14:03:27.065  INFO 10584 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 14:03:27.400  INFO 10584 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 14:03:27.402  INFO 10584 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 14:03:27.646  INFO 10584 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 14:03:27.656  INFO 10584 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.808 seconds (JVM running for 8.793)
2020-05-17 14:03:30.759  INFO 10584 --- [http-nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 14:03:30.759  INFO 10584 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 14:03:30.774  INFO 10584 --- [http-nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-05-17 14:03:30.816  INFO 10584 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:03:31.080  INFO 10584 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"title":"java事务及在spring事务的实现方式","updateTime":1588588900567,"views":3},{"appreciation":false,"commentAble":false,"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"title":"MD5加密","updateTime":1588587230447,"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:03:42.626  INFO 10584 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:03:42.644  INFO 10584 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"title":"java事务及在spring事务的实现方式","updateTime":1588588900567,"views":3},{"appreciation":false,"commentAble":false,"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"title":"MD5加密","updateTime":1588587230447,"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:06:05.573  INFO 10584 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 14:06:05.576  INFO 10584 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 14:06:05.579  INFO 10584 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 14:06:05.874  INFO 10584 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-05-17 14:06:13.889  INFO 4716 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Starting VueBlogApplication on tutu with PID 4716 (H:\IntelliJ IDEA 2019.3.2\vueblog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 14:06:13.894 DEBUG 4716 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-17 14:06:13.894  INFO 4716 --- [restartedMain] com.tutu.blog.VueBlogApplication         : The following profiles are active: dev
2020-05-17 14:06:13.987  INFO 4716 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 14:06:13.987  INFO 4716 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 14:06:15.093  INFO 4716 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-05-17 14:06:15.171  INFO 4716 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 67ms. Found 1 JPA repository interfaces.
2020-05-17 14:06:16.051  INFO 4716 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9090 (http)
2020-05-17 14:06:16.061  INFO 4716 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 14:06:16.061  INFO 4716 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-17 14:06:16.167  INFO 4716 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 14:06:16.168  INFO 4716 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2181 ms
2020-05-17 14:06:16.422  INFO 4716 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 14:06:16.485  INFO 4716 --- [task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 14:06:16.551  INFO 4716 --- [task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2020-05-17 14:06:16.609  WARN 4716 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 14:06:16.850  INFO 4716 --- [task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 14:06:16.984  INFO 4716 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 14:06:17.119  INFO 4716 --- [task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 14:06:17.139  INFO 4716 --- [task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 14:06:18.025  INFO 4716 --- [task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 14:06:18.034  INFO 4716 --- [task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 14:06:18.750  INFO 4716 --- [task-2] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-17 14:06:19.152  INFO 4716 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9090 (http) with context path ''
2020-05-17 14:06:19.154  INFO 4716 --- [restartedMain] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
2020-05-17 14:06:19.434  INFO 4716 --- [restartedMain] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2020-05-17 14:06:19.445  INFO 4716 --- [restartedMain] com.tutu.blog.VueBlogApplication         : Started VueBlogApplication in 6.461 seconds (JVM running for 8.296)
2020-05-17 14:06:20.290  INFO 4716 --- [http-nio-9090-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 14:06:20.290  INFO 4716 --- [http-nio-9090-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 14:06:20.315  INFO 4716 --- [http-nio-9090-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 24 ms
2020-05-17 14:06:20.401  INFO 4716 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:06:20.859  INFO 4716 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:06:26.663  INFO 4716 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:06:26.689  INFO 4716 --- [http-nio-9090-exec-4] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:08:06.084  INFO 4716 --- [http-nio-9090-exec-5] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:08:06.112  INFO 4716 --- [http-nio-9090-exec-5] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:09:02.592  INFO 4716 --- [http-nio-9090-exec-6] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:09:02.617  INFO 4716 --- [http-nio-9090-exec-6] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:10:38.508  INFO 4716 --- [http-nio-9090-exec-7] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:10:38.535  INFO 4716 --- [http-nio-9090-exec-7] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:13:14.484  INFO 4716 --- [http-nio-9090-exec-8] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:13:14.509  INFO 4716 --- [http-nio-9090-exec-8] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:33:16.426  INFO 4716 --- [http-nio-9090-exec-9] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:33:16.448  INFO 4716 --- [http-nio-9090-exec-9] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:33:45.525  INFO 4716 --- [http-nio-9090-exec-10] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:33:45.547  INFO 4716 --- [http-nio-9090-exec-10] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:43:28.094  INFO 4716 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:43:28.119  INFO 4716 --- [http-nio-9090-exec-1] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 14:46:27.235  INFO 4716 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:9090/admin/blogs', ip='127.0.0.1', classAndMethod='com.tutu.blog.controller.admin.BlogController.listBlogs', args=[Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-05-17 14:46:27.250  INFO 4716 --- [http-nio-9090-exec-2] com.tutu.blog.aspect.LogAspect           : result--> {"code":200,"data":{"content":[{"appreciation":true,"commentAble":true,"comments":[],"content":"# 什么是事务？\r\n* 事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。\r\n\r\n## 理解事务的实例\r\n* 事务最经典也经常被拿出来说例子就是转账了。假如小明和小红账户余额都是1000元，小明需要转账100给小红，最后的结果应该是小明900，小红1100，这个转账会涉及到两个关键操作就是：将小明的余额减少100元，将小红的余额增加100元。在小明已经转100出去的时候，系统崩溃或者程序执行异常，没有执行转入小红的余额中，这就造成了小明的余额只有900，但是小红的余额只用1000。事务就是保证这两个关键操作要么都成功，要么都要失败。\r\n\r\n## 事务的特性（ACID）\r\n* 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\r\n* 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；如转账业务，无论事务执行成功与否，参与转账的两个账户余额之和应该保持不变。\r\n* 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；比如说购票系统，多个窗口同时购票，也就相当于并发访问数据库，隔离性不够的话很有可能同一张票被多个窗口购买。隔离性也指各个独立事务之间的交互程度，是由一致性和并发性共同决定的。并发性越低，事务的隔离性越高，一致性也就越高。当提高事务的隔离性的时候，就很可能需要牺牲数据库的并发性来保证数据的一致性。所以当设置事务的隔离级别的时候，就需要综合考虑事务的一致性和并发性。\r\n\r\n* 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。也就是你买了电影票，电影院收了你的钱，不能说系统崩溃了就说买的电影票失效。\r\n\r\n## 并发事务带来的问题\r\n* 脏读（dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。简言之就是第一个事务修改了数据没提交，第二个事务来了，读取这个数据，但是最后第一个事务回滚了，那么事务二读取的就是脏数据。\r\n* 丢失修改（lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\r\n* 不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。这个针对的是修改。\r\n* 幻读（phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。这个针对的是新增和删除。\r\n\t+ 幻读例子：同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\r\n\r\n## 事务的隔离级别\r\nSQL标准定义了四个隔离级别：\r\n* READ-UNCONMITED（读取未提交）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\r\n* READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\r\n* REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\r\n* SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\r\n\t* MySQL5.5版本开始，InnoDB是默认的表存储引擎，默认支持的隔离级别是 REPEATABLE-READ（可重读），这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的SERIALIZABLE(可串行化)隔离级别。\r\n***\r\n***\r\n# spring事务管理\r\n事务传播行为就是多个事务方法调用时，如何定义方法间事务的传播。\r\n* spring定义了7种传播行为：\r\n1. propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。\r\n2. propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。\r\n3. propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。\r\n4. propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。\r\n5. propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\r\n6. propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。\r\n7. propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。\r\n* 事务的几种实现方式\r\n\r\n```java\r\n//1、编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\r\npublic int delete(int sID) { \r\n　 dbc = new DataBaseConnection(); \r\n　 Connection con = dbc.getConnection(); \r\n　 try { \r\n　　 con.setAutoCommit(false);// 更改JDBC事务的默认提交方式 \r\n　　 dbc.executeUpdate(\"delete from xiao where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_content where ID=\" + sID); \r\n　　 dbc.executeUpdate(\"delete from xiao_affix where bylawid=\" + sID); \r\n　　 con.commit();//提交JDBC事务 \r\n　　 con.setAutoCommit(true);// 恢复JDBC事务的默认提交方式 \r\n　　 dbc.close(); \r\n　　 return 1; \r\n　 } \r\n　 catch (Exception exc) { \r\n　　 con.rollBack();//回滚JDBC事务 \r\n　　 exc.printStackTrace(); \r\n　　 dbc.close(); \r\n　　 return -1; \r\n　 } \r\n} \r\n//基本已经被淘汰，了解一下就行。\r\n\r\n//2、基于 TransactionProxyFactoryBean的声明式事务管理\r\n<!-- 事务代理工厂 -->\r\n<!-- 生成事务代理对象 -->\r\n<bean id=\"serviceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r\n<property name=\"transactionManager\" ref=\"myTracnsactionManager\"></property>\r\n<property name=\"target\" ref=\"buyStockService\"></property>\r\n<property name=\"transactionAttributes\">\r\n\t<props>\r\n\t<!-- 主要 key 是方法   \r\n\t\t\tISOLATION_DEFAULT  事务的隔离级别\r\n\t\t\tPROPAGATION_REQUIRED  传播行为\r\n\t-->\r\n\t\t<prop key=\"add*\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>\r\n\t\t<!-- -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 -->\r\n\t\t<prop key=\"buyStock\">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-BuyStockException</prop>\r\n\t</props>\r\n</property>\t\r\n</bean>\r\n\r\n//3、基于 @Transactional 的声明式事务管理\r\n@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)\r\n@Override\r\npublic void addStock(String stockname, int amount) {\r\n\tstockDao.addStock(stockname,amount);\r\n\t\r\n}\r\n\r\n//4、（4）基于Aspectj AOP配置事务\r\n<!-- 事务管理器 -->\r\n<bean id=\"myTracnsactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\r\n</bean>\r\n\r\n<tx:advice id=\"txAdvice\" transaction-manager=\"myTracnsactionManager\">\r\n\t<tx:attributes>\r\n\t\t<!-- 为连接点指定事务属性 -->\r\n\t\t<tx:method name=\"add*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n\t\t<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n\t</tx:attributes>\r\n</tx:advice>\r\n\r\n<aop:config>\r\n\t<!-- 切入点配置 -->\r\n\t<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"point\"/>\r\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"point\"/>\r\n</aop:config>\r\n\r\n```","createTime":1588588709485,"description":"事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务是逻辑上的一组操作，要么都执行，要么都不执行。","firstPicture":"https://picsum.photos/id/3/800/450","flag":"转载","id":68,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":55,"name":"mysql"},{"id":57,"name":"springmvc"},{"id":58,"name":"oracle"},{"id":67,"name":"spring"}],"title":"java事务及在spring事务的实现方式","type":{"id":65,"name":"精品博文转载"},"updateTime":1588588900567,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":3},{"appreciation":false,"commentAble":false,"comments":[],"content":"```java\r\npackage com.tutu;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5Util {\r\n\r\n    private static final String MD5 = \"MD5\";\r\n\r\n    /**\r\n     * 将指定byte数组转换成16进制字符串\r\n     * @param bytes\r\n     * @return\r\n     * @throws NoSuchAlgorithmException\r\n     */\r\n    public static String byteToHexString(byte[] bytes) throws NoSuchAlgorithmException {\r\n        MessageDigest md5 = MessageDigest.getInstance(MD5);\r\n        md5.update(bytes);\r\n        byte[] hash = md5.digest();\r\n        StringBuilder secPwd = new StringBuilder();\r\n        for (byte b : hash) {\r\n            int value = b & 0xff;\r\n            if (value < 16) {\r\n                secPwd.append(0);\r\n            }\r\n            secPwd.append(Integer.toString(value, 16));\r\n        }\r\n        return secPwd.toString();\r\n    }\r\n}\r\n```","createTime":1588587230447,"description":"调用MD5算法将指定byte数组转换成16进制字符串","firstPicture":"https://picsum.photos/id/3/800/450","flag":"原创","id":66,"published":false,"recommend":true,"shareStatement":true,"tags":[{"id":54,"name":"java"}],"title":"MD5加密","type":{"id":63,"name":"学习笔记"},"updateTime":1588587230447,"user":{"avatar":"/images/avatar-nezha.jpg","createTime":1588257657000,"email":"1059894903@qqcom","id":1,"nickName":"丘友垚","password":"e10adc3949ba59abbe56e057f20f883e","type":0,"username":"root"},"views":1}],"empty":false,"first":true,"last":true,"number":0,"numberOfElements":2,"pageable":{"offset":0,"pageNumber":0,"pageSize":2,"paged":true,"sort":{"empty":false,"sorted":true,"unsorted":false},"unpaged":false},"size":2,"sort":{"empty":false,"sorted":true,"unsorted":false},"totalElements":2,"totalPages":1},"success":true}
2020-05-17 15:07:53.528  INFO 10184 --- [restartedMain] com.tutu.blog.BlogApplication            : Starting BlogApplication on tutu with PID 10184 (H:\IntelliJ IDEA 2019.3.2\blog\target\classes started by 16877 in H:\IntelliJ IDEA 2019.3.2\blog)
2020-05-17 15:07:53.532 DEBUG 10184 --- [restartedMain] com.tutu.blog.BlogApplication            : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-17 15:07:53.533  INFO 10184 --- [restartedMain] com.tutu.blog.BlogApplication            : The following profiles are active: dev
2020-05-17 15:07:53.605  INFO 10184 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in E:\maven_jar\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_jar/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-17 15:07:53.605  INFO 10184 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-17 15:07:53.605  INFO 10184 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-17 15:07:54.986  INFO 10184 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-17 15:07:55.080  INFO 10184 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 83ms. Found 5 JPA repository interfaces.
2020-05-17 15:07:55.893  INFO 10184 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-05-17 15:07:55.902  INFO 10184 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-17 15:07:55.902  INFO 10184 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-17 15:07:56.034  INFO 10184 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-17 15:07:56.035  INFO 10184 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2429 ms
2020-05-17 15:07:56.227  INFO 10184 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-17 15:07:56.390  INFO 10184 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-17 15:07:56.525  INFO 10184 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-17 15:07:56.619  INFO 10184 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-05-17 15:07:56.740  INFO 10184 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-05-17 15:07:56.757  INFO 10184 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-05-17 15:07:57.604  INFO 10184 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-17 15:07:57.610  INFO 10184 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 15:07:57.670  WARN 10184 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : Unable to start LiveReload server
2020-05-17 15:07:58.533  WARN 10184 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-17 15:07:58.731  INFO 10184 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-17 15:07:58.928  INFO 10184 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-05-17 15:07:59.394  INFO 10184 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-05-17 15:07:59.396  INFO 10184 --- [restartedMain] com.tutu.blog.BlogApplication            : Started BlogApplication in 6.475 seconds (JVM running for 9.085)
2020-05-17 15:08:03.375  INFO 10184 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-17 15:08:03.375  INFO 10184 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-17 15:08:03.388  INFO 10184 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2020-05-17 15:08:03.432  INFO 10184 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/login', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.UserController.loginPage', args=[]}
2020-05-17 15:08:03.439  INFO 10184 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : result--> admin/login
2020-05-17 15:08:08.830  INFO 10184 --- [http-nio-8888-exec-3] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/login', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.UserController.login', args=[root, 123456, org.apache.catalina.session.StandardSessionFacade@34c59a15, {}]}
2020-05-17 15:08:08.893  INFO 10184 --- [http-nio-8888-exec-3] com.tutu.blog.aspect.LogAspect           : result--> admin/index
2020-05-17 15:08:10.669  INFO 10184 --- [http-nio-8888-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/tags', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.TagController.list', args=[Page request [number: 0, size 5, sort: id: DESC], {}]}
2020-05-17 15:08:10.706  INFO 10184 --- [http-nio-8888-exec-1] com.tutu.blog.aspect.LogAspect           : result--> admin/tags
2020-05-17 15:08:10.932  INFO 10184 --- [http-nio-8888-exec-6] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 15:08:11.009  INFO 10184 --- [http-nio-8888-exec-6] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 15:08:12.909  INFO 10184 --- [http-nio-8888-exec-4] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/types', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.TypeController.list', args=[Page request [number: 0, size 5, sort: id: DESC], {}]}
2020-05-17 15:08:12.921  INFO 10184 --- [http-nio-8888-exec-4] com.tutu.blog.aspect.LogAspect           : result--> admin/types
2020-05-17 15:08:13.060  INFO 10184 --- [http-nio-8888-exec-5] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 15:08:13.070  INFO 10184 --- [http-nio-8888-exec-5] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 15:08:16.095  INFO 10184 --- [http-nio-8888-exec-3] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/tags', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.TagController.list', args=[Page request [number: 0, size 5, sort: id: DESC], {}]}
2020-05-17 15:08:16.106  INFO 10184 --- [http-nio-8888-exec-3] com.tutu.blog.aspect.LogAspect           : result--> admin/tags
2020-05-17 15:08:16.286  INFO 10184 --- [http-nio-8888-exec-1] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 15:08:16.296  INFO 10184 --- [http-nio-8888-exec-1] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 15:08:17.721  INFO 10184 --- [http-nio-8888-exec-10] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/types', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.TypeController.list', args=[Page request [number: 0, size 5, sort: id: DESC], {}]}
2020-05-17 15:08:17.725  INFO 10184 --- [http-nio-8888-exec-10] com.tutu.blog.aspect.LogAspect           : result--> admin/types
2020-05-17 15:08:17.908  INFO 10184 --- [http-nio-8888-exec-8] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 15:08:17.919  INFO 10184 --- [http-nio-8888-exec-8] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 15:08:19.252  INFO 10184 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/tags', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.TagController.list', args=[Page request [number: 0, size 5, sort: id: DESC], {}]}
2020-05-17 15:08:19.259  INFO 10184 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : result--> admin/tags
2020-05-17 15:08:19.486  INFO 10184 --- [http-nio-8888-exec-6] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 15:08:19.493  INFO 10184 --- [http-nio-8888-exec-6] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 15:08:25.941  INFO 10184 --- [http-nio-8888-exec-7] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/tags/input', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.TagController.input', args=[{}]}
2020-05-17 15:08:25.941  INFO 10184 --- [http-nio-8888-exec-7] com.tutu.blog.aspect.LogAspect           : result--> admin/tags-input
2020-05-17 15:08:26.100  INFO 10184 --- [http-nio-8888-exec-10] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 15:08:26.110  INFO 10184 --- [http-nio-8888-exec-10] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 15:08:27.635  INFO 10184 --- [http-nio-8888-exec-5] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/tags', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.TagController.list', args=[Page request [number: 0, size 5, sort: id: DESC], {}]}
2020-05-17 15:08:27.642  INFO 10184 --- [http-nio-8888-exec-5] com.tutu.blog.aspect.LogAspect           : result--> admin/tags
2020-05-17 15:08:27.812  INFO 10184 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 15:08:27.820  INFO 10184 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 15:08:32.684  INFO 10184 --- [http-nio-8888-exec-9] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/types', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.TypeController.list', args=[Page request [number: 0, size 5, sort: id: DESC], {}]}
2020-05-17 15:08:32.689  INFO 10184 --- [http-nio-8888-exec-9] com.tutu.blog.aspect.LogAspect           : result--> admin/types
2020-05-17 15:08:32.906  INFO 10184 --- [http-nio-8888-exec-4] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 15:08:32.916  INFO 10184 --- [http-nio-8888-exec-4] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 15:08:33.945  INFO 10184 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/admin/tags', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.admin.TagController.list', args=[Page request [number: 0, size 5, sort: id: DESC], {}]}
2020-05-17 15:08:33.952  INFO 10184 --- [http-nio-8888-exec-2] com.tutu.blog.aspect.LogAspect           : result--> admin/tags
2020-05-17 15:08:34.159  INFO 10184 --- [http-nio-8888-exec-6] com.tutu.blog.aspect.LogAspect           : Request--> RequestLog{url='http://localhost:8888/footer/newblog', ip='0:0:0:0:0:0:0:1', classAndMethod='com.tutu.blog.controller.IndexController.newBlogs', args=[{}]}
2020-05-17 15:08:34.168  INFO 10184 --- [http-nio-8888-exec-6] com.tutu.blog.aspect.LogAspect           : result--> _fragments :: newbloglist
2020-05-17 16:36:11.140  INFO 4716 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-17 16:36:11.157  INFO 4716 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-17 16:36:11.161  INFO 4716 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-05-17 16:36:11.166  INFO 4716 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
